var I=Object.defineProperty;var c=(t,e)=>I(t,"name",{value:e,configurable:!0});var u,w=Object.defineProperty,o=c((t,e)=>w(t,"name",{value:e,configurable:!0}),"i");const E=await(async()=>{const t={},e=await fetch(import.meta.resolve("../../_npm/sql.js@1.10.3/dist/sql-wasm.js"));return new Function("exports",await e.text())(t),t.Module({locateFile:a=>import.meta.resolve("../../_npm/sql.js@1.10.3/dist/")+a})})();var R=E;const y=(u=class{constructor(e){Object.defineProperties(this,{_db:{value:e}})}static async open(e){return new u(new E.Database(await m(await e)))}async query(e,a){return await d(this._db,e,a)}async queryRow(e,a){return(await this.query(e,a))[0]||null}async explain(e,a){const n=await this.query(`EXPLAIN QUERY PLAN ${e}`,a);return s("pre",{className:"observablehq--inspect"},[f(n.map(r=>r.detail).join(`
`))])}async describeTables({schema:e}={}){return this.query(`SELECT NULLIF(schema, 'main') AS schema, name FROM pragma_table_list() WHERE type = 'table'${e==null?"":" AND schema = ?"} AND name NOT LIKE 'sqlite_%' ORDER BY schema, name`,e==null?[]:[e])}async describeColumns({schema:e,table:a}={}){if(a==null)throw new Error("missing table");const n=await this.query(`SELECT name, type, "notnull" FROM pragma_table_info(?${e==null?"":", ?"}) ORDER BY cid`,e==null?[a]:[a,e]);if(!n.length)throw new Error(`table not found: ${a}`);return n.map(({name:r,type:i,notnull:l})=>({name:r,type:h(i),databaseType:i,nullable:!l}))}async describe(e){const a=await(e===void 0?this.query("SELECT name FROM sqlite_master WHERE type = 'table'"):this.query("SELECT * FROM pragma_table_info(?)",[e]));if(!a.length)throw new Error("Not found");const{columns:n}=a;return s("table",{value:a},[s("thead",[s("tr",n.map(r=>s("th",[f(r)])))]),s("tbody",a.map(r=>s("tr",n.map(i=>s("td",[f(r[i])])))))])}async sql(){return this.query(...this.queryTag.apply(this,arguments))}queryTag(e,...a){return[e.join("?"),a]}},c(u,"o"),u);o(y,"SQLiteDatabaseClient");let p=y;Object.defineProperty(p.prototype,"dialect",{value:"sqlite"});function h(t){switch(t){case"NULL":return"null";case"INT":case"INTEGER":case"TINYINT":case"SMALLINT":case"MEDIUMINT":case"BIGINT":case"UNSIGNED BIG INT":case"INT2":case"INT8":return"integer";case"TEXT":case"CLOB":return"string";case"REAL":case"DOUBLE":case"DOUBLE PRECISION":case"FLOAT":case"NUMERIC":return"number";case"BLOB":return"buffer";case"DATE":case"DATETIME":return"string";default:return/^(?:(?:(?:VARYING|NATIVE) )?CHARACTER|(?:N|VAR|NVAR)CHAR)\(/.test(t)?"string":/^(?:DECIMAL|NUMERIC)\(/.test(t)?"number":"other"}}c(h,"T"),o(h,"sqliteType");function m(t){return typeof t=="string"?fetch(t).then(m):t&&typeof t.arrayBuffer=="function"?t.arrayBuffer().then(m):t instanceof ArrayBuffer?new Uint8Array(t):t}c(m,"f"),o(m,"load");async function d(t,e,a){const[n]=await t.exec(e,a);if(!n)return[];const{columns:r,values:i}=n,l=i.map(b=>Object.fromEntries(b.map((N,T)=>[r[T],N])));return l.columns=r,l}c(d,"w"),o(d,"exec");function s(t,e,a){arguments.length===2&&(a=e,e=void 0);const n=document.createElement(t);if(e!==void 0)for(const r in e)n[r]=e[r];if(a!==void 0)for(const r of a)n.appendChild(r);return n}c(s,"s"),o(s,"element");function f(t){return document.createTextNode(t)}c(f,"m"),o(f,"text");export{p as SQLiteDatabaseClient,R as default};
